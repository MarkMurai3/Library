// const formInfos = document.querySelector('#bookinfos');

// async function sendData() {
//     const formData = new FormData(formInfos);

//     try {
//         const response = await fetch("https://example.org/post", {
//              method: "POST",
//              body: formData,
//         });
//         console.log(await response.json());
//     } catch(e){
//         console.error(e);
//     }
// }

// formInfos.addEventListener("submit", (event) =>{
//     event.preventDefault();
//     sendData();
// });






const sendBtn = document.getElementById("submit");


function getTitleValue(){
    const titleInfo = document.getElementById("title");
    const titleValue = titleInfo.value;
    console.log("Title is " + titleValue);
    return titleValue;
}

function getAuthor(){
    const authorValue = document.getElementById("author");
    return authorValue.value;
}

function getNumPages(){
    const numPages = document.getElementById("pages");
    return numPages.value;
}

function getRead(){
    const readIt = document.getElementById("read");
    console.log(readIt);
    if(readIt.value == 'on'){
        readIt.value = "Read it";
    }
    else{
        readIt.value = "Haven't read it yet";
    } //THE FIRST TIME ADDING A NEW BOOK THE VALUE IS ALWAYS "READ IT". FIX IT 
    return readIt.value;
}

sendBtn.addEventListener("click", () => {
    addBookToLibrary();
});


function addBookToLibrary(){
    // take params, create a book then store it in the array
    const title = getTitleValue();
    const author = getAuthor();
    const pages = getNumPages();
    const read = getRead();

    let id = crypto.randomUUID();
    if(title == '' || author == '' || pages == '') return 0;
    myLibrary.push(new Book(title, author, pages, read, id));
    refreshTable();

}


function Book(title, author, pages, read, id){
    if(!new.target){
        throw Error("Use 'new' ya fool");
    }
        this.title = title;
        this.author = author;
        this.pages = pages;
        this.read = read;
        this.id = id;
        this.info = function(){
            console.log(this.title, this.author, this.pages, this.read, this.id);
        };
}


const theHobbit = new Book("The Hobbit", "by J.R.R. Tolkien", "295 pages", "not read yet");


const myLibrary = [theHobbit];


// event.preventDefault(); THIS WILL BE NEEDED
// Book prototype function that toggles a book instance's "read" status
// "data-attribute" that corresponds to the unique id of the respective book object

function newTable(){
    deleteTable();
    refreshTable();

}

function deleteTable(){
    const rows = document.querySelectorAll("tr");
    for(let i = 1; i < rows.length; i++){
        rows[i].remove(); 
    }
}

function refreshTable(){
    deleteTable();
    const table = document.querySelector("tbody");
    for(const i of myLibrary){
        const tr = document.createElement("tr");
        table.appendChild(tr);
        console.log(i);
        // console.log(i.title); 

        const title = i.title;
        const author = i.author;
        const pages = i.pages;
        const read = i.read;
        // const id = i.id;
        const arr = [title, author, pages, read];
        for (value of arr){
            const td = document.createElement("td");
            td.textContent = value;
            tr.appendChild(td);
        }
    }
}

Book.prototype.beenRead = function(){
    if(Book.read == "not read yet"){
        Book.read = "Read it";
    } else if (Book.read == "Read it"){
        Book.read = "not read yet";
    }
}




// console.log(theHobbit);

// All the Book objects are gonna be stored in an array. GOT IT
// All the book objects should have a unique ID generated by crypto.randomUUID() GOT IT

// Function that loops through the array and displays each book on the page. ON IT
// Display in tables or "each on their own card". GOT IT
// First store books in array, then display them. ON IT, ALMOST GOT IT
// Add a "New Book" button that brings up a form allowing users to input the details. ON IT
// of the new book and add it to the library: author, title, number of pages, 
// whether is's been read and anything you might want. GOT IT

// How you display this form is up to you. (examples: form shown on a sidebar or explore dialogs and modals with <dialog>) ON IT.
// Submit tries to send data to a server by default. "event.preventDefault();" will come in handy. FUCK



// Add a button on each book's display to remove the book from the library. GOT IT
    // You will need to associate your DOM elements with the actual book objects in some way. One easy
    // solution is giving them a "data-attribute" that corresponds to the unique id of the respective book object. 



// Add a button on each book's display to change its "read" status. To facilitate this 
// you'll want to create a Book prototype function that toggles a book instance's "read" status

// You're not required to add any type of storage to save the information between page reloads. GOT IT


// The preventDefault() method of the Event interface tells the user agent that 
// if the event does not get explicitly 
// handled, its default action should not be taken as it normally would be.



// READ THIS!!!!!!!!!
//https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Sending_forms_through_JavaScript

//AND THIS ONE TOO
// https://developer.mozilla.org/en-US/docs/Web/HTML/How_to/Use_data_attributes

// ALSO READ ABOUT PROTOTYPE